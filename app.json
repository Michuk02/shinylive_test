[{"name":"app.R","content":"setwd(\"C:/Users/micha/Downloads\")\r\ngetwd()\r\ninstall.packages(\"shinylive\")\r\nlibrary(shinylive)\r\nlibrary(shiny)\r\nlibrary(pwr)\r\nlibrary(ggplot2)\r\n\r\n# Define UI for application\r\nui <- fluidPage(\r\n  titlePanel(\"Sample Size Calculator for Correlation\"),\r\n  sidebarLayout(\r\n    sidebarPanel(\r\n      numericInput(\"correlation\", \"Expected Correlation Coefficient:\", value = 0.5, min = 0, max = 1, step = 0.01),\r\n      numericInput(\"power\", \"Desired Power (e.g., 0.80):\", value = 0.80, min = 0, max = 1, step = 0.01),\r\n      numericInput(\"alpha\", \"Significance Level (e.g., 0.05):\", value = 0.05, min = 0, max = 1, step = 0.01),\r\n      actionButton(\"calculate\", \"Calculate Sample Size\")\r\n    ),\r\n    mainPanel(\r\n      textOutput(\"result\"),\r\n      plotOutput(\"powerPlot\")\r\n    )\r\n  )\r\n)\r\n\r\n# Define server logic required to calculate sample size and render plot\r\nserver <- function(input, output) {\r\n  observeEvent(input$calculate, {\r\n    correlation <- input$correlation\r\n    power <- input$power\r\n    alpha <- input$alpha\r\n    \r\n    result <- pwr.r.test(r = correlation, power = power, sig.level = alpha)\r\n    \r\n    output$result <- renderText({\r\n      paste(\"Required Sample Size:\", ceiling(result$n))\r\n    })\r\n    \r\n    output$powerPlot <- renderPlot({\r\n      sample_sizes <- seq(5, 50, by = 1)\r\n      power_values <- sapply(sample_sizes, function(n) {\r\n        pwr.r.test(n = n, r = correlation, sig.level = alpha)$power\r\n      })\r\n      \r\n      plot_data <- data.frame(\r\n        sample_size = sample_sizes,\r\n        power = power_values\r\n      )\r\n      \r\n      ggplot(plot_data, aes(x = sample_size, y = power)) +\r\n        geom_line(color = \"red\") +\r\n        geom_point() +\r\n        geom_vline(xintercept = ceiling(result$n), linetype = \"dashed\", color = \"blue\") +\r\n        annotate(\"text\", x = ceiling(result$n), y = 0.1, label = paste(\"optimal sample size\\nn =\", ceiling(result$n)), color = \"blue\", angle = 90, vjust = -0.5) +\r\n        labs(\r\n          title = \"Proportion Power Calculation for Binomial Distribution (Arcsine Transformation)\",\r\n          x = \"Sample Size\",\r\n          y = \"Test Power = 1 - Î²\"\r\n        ) +\r\n        theme_minimal()\r\n    })\r\n  })\r\n}\r\n\r\n# Run the application \r\nshinyApp(ui = ui, server = server)\r\n\r\nlibrary(shinylive)\r\n\r\nshinylive::export(appdir =\"shinylive_test\", destdir=\"strona_test\")\r\nhttpuv::runStaticServer(\"strona_test\")\r\n","type":"text"},{"name":"shinylive.R","content":"library(shinylive)\r\n\r\nshinylive::export(appdir =\"shinylive_test\", output_dir=\"site\")\r\nhttpuv::runStaticServer(\"site\")","type":"text"}]
